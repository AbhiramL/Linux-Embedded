Device Driver Programming: LED, UART, I2C device

--Buildroot setup--

Follow the following instruction with buildroot after running make beaglebone_defconfig
Enable the following:

Buildroot: make menuconfig
Toolchain:
-c++ support
-toolchain to use glibc, gcc 13.x, binutils 2.40 or higher
-enable c++ support

Kernel
-Linux kernel tools: enable gpio tools
-target packages>filesystem and flash utilities>e2fsprogs & enable dofstools (all options) dofstools needs glibc toolchain not musl

System Configuration:
-Enable /dev management: Dyanamic using detmpfs + mdev
-Enable remount root filesystem read-write during boot

Target Packages:
-System Tools: enable kmod and kmod util
- "      "   : enable util-linux>mount/umount

File system:
-enable tar rootfs 
-enable ext4 filesystem
-512M exact size

Busybox: make busybox-menuconfig
Linux Module Utilities:
-insmod, rmmod, lsmod, modinfo, modprobe must be enabled

Linux: make linux-menuconfig
-enable loadable module support

Uboot: make uboot-menuconfig
-Enable: Environment>Environment is in a MMC device, Env is in a Fat Fs
-Load value 'mmc' for: Environment>Name of block device for Environment
-Load value '1:1' for:      "     >Dev and part for where to store the environment in FAT
-Change Environment>mmc device number and mmc partition number to '1'

end.

--Setting up DTS file and module environment--

1. Edit .dts file located at buildroot/output/build/linux-custom/arch/arm/boot/dts/am335x-boneblack.dts
    - linux-custom is the folder for the buildroot linux version since I enabled custom tarball in menuconfig. If 
    you make buildroot to make the 6.6 kernel in the image for example, find the linux-6.6 folder.

2. Navigate to the /buildroot/output/build/linux-custom folder where the kernel source files are. 
    - Run 'make dtbs' to make the linux kernel compile the dts files into dtb files.

3. Create a directory in the home directory '~' for your modules, something like kernMods/moduleName

4. If permission errors occur in tmp directories when you are compiling, do:

sudo chown -R $USER:$USER /home/abhiram/kernMods/moduleFolderName
chmod -R u+rwX /home/abhiram/kernMods/moduleFolderName

5. The code in the kernel directories of the github are for kernel 6.6.32, certain code may not be compatible with earlier kernels.


--Developing Hello module--

1. Follow structure of helloMod.c in modules folder on Github

2. Make a Makefile to use buildroot's generated cross compiler toolchain by specifying CROSS_COMPILE in the terminal environment and link the buildroot generated linux 
image's kernel headers by specifying KERNEL_DIR and updating the PATH variable.

export PATH=$HOME/buildroot-2024.11.1/output/host/bin:$PATH     <--change buildroot version if needed
export ARCH=arm
export CROSS_COMPILE=arm-buildroot-linux-gnueabihf-

Note: if changes are made to buildroot's toolchain or kernel version settings, these values will change. linux-custom in the Makefile refers to the custom tarball 
of the linux kernel buildroot will build.

3. Boot into linux image on BBB, use 'insmod mod.ko' to load the module and 'rmmod mod' to unload the mod. Use lsmod to check loaded modules.


--Developing Led_blink mod--

1. The first thing to do is to enable a legacy interface for busybox by enabling CONFIG_GPIO_SYSFS in the kernel configuration .config file. Also make sure 
Debugfs is enabled (CONFIG_DEBUG_FS and CONFIG_DEBUG_FS_ALLOW_ALL).

Note: 
You can modify onboard LED to test the legacy interface:
In the BBB, do the following:

cd /sys/class/leds
ls                  <-- these are on-board LEDS close to the physical mini usb-A port

Pick one: cd beaglebone:green:usr0/

cat trigger

As you can see, there are many triggers to choose from. You can disable all triggers by:

echo none > trigger

And then directly control the LED:

echo 1 > brightness
echo 0 > brightness

You could also use the timer trigger to light the LED with specified time on and time off:

echo timer > trigger
echo 10 > delay_on
echo 200 > delay_off

2. The pinout for the Beaglebone black has expansion headers P8 and P9, we will access P9_12 or GPIO1_28 as stated in the BBB system reference manual. 
Use the following equation to get the Linux GPIO number:

    Linux GPIO Number = (GPIO bank number * 32) + pin number in the bank

so for GPIO1_28 -->   L = (1 * 32) + 28 = 60, so GPIO 60 is to be referenced in the kernel mod to drive P9_12

Note:
In my testing, GPIO 60 was not 'available' as I got an error: 
LED Blink Module: GPIO 60 request failed
insmod: ERROR: could not insert module led_blink.ko: Unknown error 517

-By running the command 'cat /sys/kernel/debug/gpio' in the BBB terminal after the kernel has booted, 
you will see the state of all gpio pins on the system.
-if the gpio pin number you set didnt show up here, it means it is likely in use and cannot be used.
-Run the cat command above, find the pin you want to use to drive a LED
available ones will look like : gpio-540 (P9_12               |sysfs               ) in  hi 

TLDR. 540 is the pin number used in this gpio bank and not 60 as I calculated earlier.

3. Set the led pin number in the .c file, and run the compiled .ko using insmod and rmmod. My LED module is to be used as follows:
-on the breadboard, connect the ground of the BBB to the gnd of the breadboard
-connect the pin you allocated to toggling to the available rows A-J on the breadboard and, in series, connect an LED to it and the ground of the breadboard.

Remember to do the following when running make to compile the led_blink.c:
export PATH=$HOME/buildroot-2024.11.1/output/host/bin:$PATH     <--change buildroot version if needed
export ARCH=arm
export CROSS_COMPILE=arm-buildroot-linux-gnueabihf-


--UART Module--
--Version 1--

Developing a Kernel module for simply printing a character to UART 0 port:

-Develop a simple kernel module with functions that can be mapped to libc system calls:
Open - which can be mapped to initialization of the UART port
Read - which can be mapped to reading characters on serial line into a buffer
Write - which can be mapped to writing characters to the serial line from a buffer
Ioctl - which can be mapped to setting baud rate and parity etc.

-Register the character device so a new device will appear under /dev/ in the linux directory by simply creating a character device within the kernel module 
via register_chrdev. Unregister the device at the end of the module(when it is to be unloaded/removed using rmmod) with unregister_chrdev.

-Create a file operations struct that the linux kernel can use to map system calls with module functions that you define. At least the 4 above system calls 
should be mapped to kernel module functions. 

-The userspace program will call open, read, write, ioctl, which will invoke the kernel to do sys_open, sys_read, sys_write, and sys_ioctl. When these sys 
calls are executed by the kernel, the file operations struct within the kernel module will direct the kernel to execute the associated function then return.

The BeagleBone Black (BBB) uses a memory-mapped UART rather than I/O-mapped like traditional x86 systems.
 
    The BBB is based on the AM335x SoC (TI Sitara series), which features memory-mapped UART peripherals.
    It has 6 UARTs (UART0 to UART5), each mapped to a specific physical memory address.
    Each UART has a register set mapped into the SoC's memory space.

Memory-Mapped Base Addresses for BBB UARTs
UART	Base Address
UART0	0x44E09000
UART1	0x48022000
UART2	0x48024000
UART3	0x48026000
UART4	0x48028000
UART5	0x4802A000


Since UART on BBB is memory-mapped, you must:

    Map the physical UART base address to a virtual address using ioremap().
    Read/write to UART registers using readl() and writel().
    Enable the UART module via PRCM (Power, Reset, and Clock Management) if needed.

Working Example: Writing a Character to UART

#include <linux/io.h>
#include <linux/delay.h>

#define UART_BASE  0x48022000  // UART1 Base Address on BBB
#define UART_THR   0x00        // Transmit Holding Register
#define UART_LSR   0x14        // Line Status Register
#define UART_LSR_THRE  0x20    // Transmit Holding Register Empty flag

void __iomem *uart_base;

// Function to write a character to UART
static void uart_write_char(char c)
{
    // Wait until the UART is ready
    while (!(readl(uart_base + UART_LSR) & UART_LSR_THRE))
        udelay(10);

    // Write the character
    writel(c, uart_base + UART_THR);
}

// Function to initialize the UART in the kernel module
static int __init uart_init(void)
{
    uart_base = ioremap(UART_BASE, 0x1000);
    if (!uart_base)
    {
        printk(KERN_ERR "Failed to map UART memory\n");
        return -ENOMEM;
    }

    printk(KERN_INFO "BBB UART Initialized\n");
    return 0;
}

// Function to clean up the module
static void __exit uart_exit(void)
{
    if (uart_base)
        iounmap(uart_base);

    printk(KERN_INFO "BBB UART Unloaded\n");
}

module_init(uart_init);
module_exit(uart_exit);
MODULE_LICENSE("GPL");


Key Takeaways

    BBB UART is memory-mapped, not I/O-mapped like x86.
    Use ioremap() to access UART registers.

V1: Reading and Writing to UART 0
 
1. Version 1 of uartMod.c will use kernel_write, which sends data to /dev/ttyS0, the UART driver takes over
and performs the necessary hardware-level operations to transmit the data via the UART's TX pin. kernel_write
itself does not access hardware registers like THR (Transmit Holding Register) or LSR (Line Status Register).
Those operations are encapsulated by the UART driver, which abstracts the hardware access from the user/
kernel space. 

V2: Reading from UART 0 and Writing to UART 1

Modify DTS file to have access to UART 0 AND 1:
1. Build buildroot with at least the command 'make beaglebone_defconfig' to have access to dts files and the 
cross-compiler. The directory buildroot/output/build/linux-custom/arch/arm/boot/dts/ti/omap will have the 
am335x-boneblack.dts file to modify. 

2. Copy the following code to am335x-boneblack.dts underneath the definition for cpu0_op_table. Save the file.
&am33xx_pinmux { 
    uart1_pins: uart1-pins {
		pinctrl-single,pins = <
            AM33XX_PADCONF(AM335X_PIN_UART1_RXD, PIN_INPUT_PULLUP, MUX_MODE0)
            AM33XX_PADCONF(AM335X_PIN_UART1_TXD, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
		>;
	};
};

&uart1 {
    pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;

	status = "okay";
	symlink = "bone/uart/1";
};

-The configuration of the uart 1 was copied from the configuration of uart 0 in am335x-bone-common.dtsi. 
Any new subnodes you add (for example, the definition of uart 1 pins) will be added to the existing am33xx_pinmux node.

-Overriding Properties: If you specify properties or subnode names that already exist in included files, your 
DTS file’s version will override the corresponding definitions from the dtsi.

-The am335x-bone-common.dtsi includes am335x-bbb-bone-buses which includes the am33xx.h header file containing
pin defines. This file is located at buildroot/output/build/linux-custom/include/dt-bindings/pinctrl/.

-Uart 1 was used since the pins were already defined in the am33xx.h file.


3. After saving the dts file, navigate to buildroot/ run "make linux-rebuild", then "make". The am335x-boneblack.dtb is the 
file to use for BBB's linux system.

4. To test the new am335x-boneblack.dtb, place the file in the boot section of the BBB emmc or sd card boot 
partition and boot the linux system on BBB. Use the following commands to test the uart 1 ports(P9_24 TX, P9_26 RX).

-Check 'dmesg | grep ttyS' to see if uart 1 and 0 initialize. 

-Use 'stty -a -F /dev/ttyS1' to confirm baud rate. Baud rate defaults to 9600 unless a change is made in the dts 
file.

-Set a baud rate temporarily with 'stty -F /dev/ttyS1 115200'

-Send a string on the uart 1 port with 'echo "Hello" > /dev/ttyS1'

5. If you compiled the userPgrm.c, execute the userPgrm on BBB using './userPgrm' and you can send messages to UART 1,
make sure that the UART module is loaded.

-Remember to do the following when running make to compile :
export PATH=$HOME/buildroot-2024.11.1/output/host/bin:$PATH     <--change buildroot version if needed
export ARCH=arm
export CROSS_COMPILE=arm-buildroot-linux-gnueabihf-


