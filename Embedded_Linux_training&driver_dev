********Embedded Linux training********

1. Building Cross compiling toolchain 

-using crosstool-ng-1.26.0(stable version)

sudo apt install build-essential git autoconf bison flex texinfo help2man gawk libtool-bin \libncurses5-dev unzip
git clone https://github.com/crosstool-ng/crosstool-ng
cd crosstool-ng/
git checkout crosstool-ng-1.26.0

-building crosstool from git repo, installing locally, configure toolchain 

./bootstrap
./configure --enable-local
make
./ct-ng __________    <--- [place sample here(ex. arm-cortex_a8-linux-gnueabi), use ./ct-ng list-samples]
./ct-ng menuconfig

-set the following: 
*************************************************************************
In Path and misc options: 
• If not set yet, enable Try features marked as EXPERIMENTAL
In Target options:
• Set Use specific FPU (ARCH_FPU) to vfpv3.
• Set Floating point to hardware (FPU).
In Toolchain options:
• Set Tuple's vendor string (TARGET_VENDOR) to training.
• Set Tuple's alias (TARGET_ALIAS) to arm-linux. This way, we will be able to use the compiler as arm-linux-gcc instead of arm-training-linux-musleabihf-gcc, which is much longer to type.
In Operating System:
• Set Version of linux to the closest, but older version to 6.6. It’s important that the kernel headers used in the toolchain are not more recent than the kernel that will run on the board (v6.6).
In C-library:
• If not set yet, set C library to musl (LIBC_MUSL)
• Keep the default version that is proposed
In C compiler:
• Set Version of gcc to 13.2.0.
• Make sure that C++ (CC_LANG_CXX) is enabled
In Debug facilities:
• Remove all options here. Some debugging tools can be provided in the toolchain, but they can also be built by filesystem building tools
*****************************************************************************

-build toolchain
 
./ct-ng build

-testing toolchain, requires toolchain dir to be added to path variable

export PATH=$PATH:/home/kishore/x-tools/arm-training-linux-musleabihf/bin/
nano hello.c   <--- make a hello.c
arm-linux-gcc -o hello.o hello.c
file hello.o  <--- should return a ARM exe file

------------------ additl. testing with qemu
sudo apt install qemu-user
find ~/x-tools -name ld-musl-armhf.so.1   <---[ shared library loader compiled for ARM, would likely return ~/x-tools/arm-training-linux-musleabihf/arm-training-linux-musleabihf/sysroot/lib/ld-musl-armhf.so.1 ]
qemu-arm -L ~/x-tools/arm-training-linux-musleabihf/arm-training-linux-musleabihf/sysroot \hello
-------------------

cd crosstool-ng/
./ct-ng clean

2. U-boot

-set up serial com on ttyUSB0

sudo apt install picocom
dmesg | grep tty    <--- will find which port the connected device is on, assumed ttyUSB0...
picocom -b 115200 /dev/ttyUSB0  <--- ctrl-a + ctrl-x to exit

-fetch u-boot code from github

git clone https://gitlab.denx.de/u-boot/u-boot
cd u-boot
git checkout v2024.04

-altering uboot settings

export CROSS_COMPILE=arm-linux-
ls configs/ | grep am335   <---[ am335x_evm_defconfig is for beaglebone black board, not am335x_boneblack_vboot_defconfig which is for verified boot ]
make am335x_evm_defconfig
make menuconfig   <--- no change necessary
sudo apt install libssl-dev device-tree-compiler swig \python3-distutils python3-dev python3-setuptools     <--- tools for u-boot compilation for BBboard

-build uboot for BBboard
make DEVICE_TREE=am335x-boneblack

-preparing micro SD card

dmesg    <--- shows system messages, find sd card (sdb or mmcblk0, assumed sdb)
lsblk    <--- shows devices, if partition of the sd card is mounted, use sudo umount to unmount
sudo dd if=/dev/zero of=/dev/sdb bs=1M count=16   <--- wipes sd card
sudo cfdisk /dev/sdb

-If cfdisk asks you to Select a label type, choose dos. This corresponds to traditional partitions tables that DOS/Windows would understand. gpt partition tables are needed for disks bigger than 2 TB.
-In the cfdisk interface, delete existing partitions, then create only one primary partition, starting from the
beginning, with the following properties:
• Size: 64MB big
• Type: W95 FAT32 (LBA) (c choice)
• Bootable flag enabled
Press Write when you are done.

-write FAT32 filesystem on new FAT32 partition

sudo mkfs.vfat -a -F 32 -n boot /dev/sdb1    <--- sdb1 is partition 

-mount and copy uboot files

sudo mkdir -p /mnt/sdcard
sudo mount /dev/sdb1 /mnt/sdcard
cd ~/u-boot/
sudo cp MLO u-boot.img /mnt/sdcard
sudo umount /mnt/sdcard

-place sd card on board, reset board, observe changes on serial port on boot up


3. Kernel fetching and running

-get linux kernel from https://www.kernel.org/ , stable version is best
-when compiling kernel, need to specify ARCH and CROSS_COMPILE or it will compile using gcc and current architecture. 

export PATH=$PATH:/home/kishore/x-tools/arm-training-linux-musleabihf/bin
export ARCH=arm
export CROSS_COMPILE=arm-linux-

-above statements puts the settings of compilation in enviornment variables, must be run before compiling if the terminal is reset.

cd linux/
make menuconfig
make omap2plusdefconfig
--------NEED TO INCLUDE OTHER SETTINGS
-to make kernel after config:

make -j6 all    

-j6 is number of jobs to be done in parallel(6)
-running make all again will show where zimage and image of the kernel is
-if sdcard, partion remaining space, place zimage and image in boot partition
-.dtb in ~/linux/arch/arm/boot/dts/ti/omap/am335x-boneblack.dtb, if for another board, look in dts folder for vendor name, then board.

-copy zImage(ARM32 systems) or Image(ARM64 systems) and .dtb file to fat partition(the boot partition)
-boot up device and interupt the process to start modifying env variables
-must load zImage at an address that is guaranteed to be free and not in use by other system components, and another address that will not be in conflict with zImage for the .dtb file

-Load the kernel image(fatload is a uboot command to get a file from device)
-Load the device tree blob
-Boot the kernel

setenv bootargs console=ttyS0,115200n8    <--so we can see kernel msg on cmd line
saveenv

fatload mmc 0:1 0x81000000 zImage
fatload mmc 0:1 0x82000000 am335x-boneblack.dtb
bootz 0x81000000 - 0x82000000

-should see kernel boot up and panic.

-ease of use: 
setenv bootcmd 'fatload mmc 0:1 0x81000000 zImage; fatload mmc 0:1 0x82000000 am335x-boneblack.dtb; bootz 0x81000000 - 0x82000000'
saveenv


4. Making working root file system

export PATH=$PATH:/home/kishore/x-tools/arm-training-linux-musleabihf/bin
export ARCH=arm
export CROSS_COMPILE=arm-linux-


busybox: get busybox 1.36.0
make defconfig
make install  <--set location in menuconfig settings->installation options, location should be rootfs location on sdcard

create some files:
create the missing dir: dev,etc,home,lib,proc,sbin,sys,usr 
in dev/
sudo mknod console c 5 1
sudo mknod null c 1 3
sudo mknod tty c 5 0
sudo mknod zero c 1 5

in etc/  do:

sudo nano fstab:
dev/mmcblk0p2 / ext4 defaults 0 1
/dev/mmcblk0p3 /storage ext4 defaults 0 2

sudo nano inittab:
::sysinit:/etc/init.d/rcS
ttyS0::respawn:/sbin/getty 115200 ttyS0

make /etc/init.d/rcS    pi
#!/bin/sh
mount -t proc proc /proc
mount -t sysfs sysfs /sys
/bin/sh

create permissions for files:
 sudo chmod 755 rcS
 sudo chmod 600 inittab 


4.1 buildroot: generating kernel, uboot, fs


1:


export PATH=$PATH:/home/kishore/x-tools/arm-training-linux-musleabihf/bin
export ARCH=arm
export CROSS_COMPILE=arm-linux-

for Beaglebone board: can use beaglebone_defconfig

Target:
Target Architecture (ARM (little endian))
Target Architecture Variant (cortex-A8)  
Target ABI (EABIhf)
Floating point strategy (VFPv3-D16) 
ARM instruction set (ARM)Target Binary Format (ELF)  

Toolchain:
enable C++ support and SSP support
cLibrary = musl
gcc 13.x
6.4.x kernel headers

Kernel:
enable build dtb
dont enable: dtb built by kernel itself
enable OpenSSL

Target Packages:
allow default busybox config produced by make defconfig
In Filesystem and flash util, enable dofstools>mkfs.fat and e2fsprogs for mkfs.ext2
Bootloader:
Uboot

Filesystem images:
enable ext2/3/4 filesystem
128M exact size
enable: tar the root filesystem


-built with predefined crosscompiler toolchain, and kernel with custom defconfig
-use sdcard.img and overwrite the sdcard with it, it will contain u-boot, kernel, and rootfs with correct partitions:
unmount all partitions of the sdcard
do: sudo dd if=/home/kishore/buildroot/output/images/sdcard.img of=/dev/[name of sdcard device, ex. sdc] bs=4M status=progress    <--- make sure this is correctly typed or computer might get overwritten. 


or alternatively: 

2:

use beaglebone_defconfig file and change:
toolchain to use glibc, gcc 12.x, binutils 2.40

to produce kernel with fs creation capability, you need to enable:
target packages>filesystem and flash utilities>e2fsprogs & enable dofstools (all options) dofstools needs glibc not musl

make linux-menuconfig, go to filesystems, NLS, enable cp850(Europe) and other settings like vfat support



5.1 Working with TFTP server to make a network bootable kernel

hostname -I   <---host ip
arp -a 	      <---connected devices, should see BBB's ip later


sudo apt install tftpd-hpa
sudo nano /etc/default/tftpd-hpa

-change the directory to the tftp working directory that will have the new zimage and .dtb

sudo chmod -R 777 tftpBBB/
sudo systemctl restart tftpd-hpa
sudo nc -u -l -p TFTP_ADDRESS   <--found in the tftpd-hpa file, last 2 numbers

****using usb-ethernet cable for BBB****
host:
sudo systemctl restart tftpd-hpa

BBB tftp:
setenv ethprime usb_ether
setenv usbnet_devaddr f8:dc:7a:00:00:02     <---change to address in uboot enviornment
setenv usbnet_hostaddr f8:dc:7a:00:00:01

-if you ping serverip, you can run ifconfig on host and a new device will be seen on PC
-you must configure the host network:
nmcli con add type ethernet ifname XXXX ip4 192.168.0.1/24   <---replace XXXX with BBB device name, ex: enxf8dc7a000001 showed up on ifconfig.

************for onboard ethernet: setenv ethact eth0

# /etc/default/tftpd-hpa

TFTP_USERNAME="tftp"
TFTP_DIRECTORY="/home/kishore/tftpBBB"
TFTP_ADDRESS="0.0.0.0:69"
TFTP_OPTIONS="--secure"

***********

5.2 Working with NFS server to make a non-local rootfs for target

-using nfs server, you can make the target kernel boot with a rootfs on the host machine:

sudo mkdir ~/nfsroot
sudo apt-get install nfs-kernel-server
sudo nano /etc/exports    <--edit file to add nfs root directory: /home/<user>/nfsroot 192.168.0.100(rw,sync,no_subtree_check,no_root_squash) <--- change ip to ip of BBB, or simply do * to make it accessible by any ip if you are doing dynically allocated ip.
sudo exportfs -a
sudo systemctl restart nfs-kernel-server


-kernel .config file must have the following settings to continue:
CONFIG_NFS_FS=y (NFS client support)
CONFIG_ROOT_NFS=y (support for NFS as rootfs)
CONFIG_IP_PNP=y (configure IP at boot time)

-kernel boot (U-boot) settings: change with setenv and save with saveenv
root=/dev/nfs    <--change to rootfs over NFS
ip= XXX.XXX.XXX  <--target ip addr
nfsroot= YYY.YYY.YYY:/home/usr/rootfs,nfsvers=3,tcp  <--host ip and server details

*************Busybox filesystem generation, skip if using buildroot fs***********
-use busybox defconfig
change prefix of compiler and destination of rootfs to nfsroot folder
sudo make menuconfig # for above changes
sudo make CC={path to arm-linux-gcc toolchain} 
sudo make CC=.................................  install

NFS Root Filesystem Structure in addition to Busybox generated files:

    Make sure the root filesystem you’re serving via NFS contains all necessary files and directories:
        /bin
        /dev
        /etc
        /proc
        /sys
    You can create a minimal set of device files using mknod for essential TTYs:

    bash

cd /nfs/rootfs/dev
sudo mknod tty1 c 4 1
sudo mknod tty2 c 4 2
sudo mknod tty3 c 4 3
sudo mknod tty4 c 4 4

********************Using Buildroot .ext4 filesystem*******************

-need to mount the rootfs.ext4 file in order to access the filesystem, if you dont mount it, the /bin /etc .... folders will not be accessible to BBB and it will panic

-temporary: sudo mount -o loop rootfs.ext4 ~/nfsroot
and you can sudo umount nfsroot  from working directory after project is done

-permanent:
Step 1: Mount the ext4 Image or tar -xvf the rootfs.tar file if you selected tar the filesystem

Mount the rootfs.ext4 file temporarily so you can access its contents:

mkdir /mnt/rootfs
sudo mount -o loop rootfs.ext4 /mnt/rootfs

Step 2: Copy Files to NFS Root

Now copy the contents of the mounted filesystem to your NFS root directory:

sudo cp -a /mnt/rootfs/* /nfsroot/

    The -a option preserves file attributes and copies directories recursively.

Step 3: Set Permissions (if necessary)

You may need to set appropriate permissions for the files in the NFS root directory:

sudo chown -R nobody:nogroup /nfsroot

Adjust the owner and group as needed based on your NFS configuration.
Step 4: Update NFS Exports

Make sure your /etc/exports file has the right configuration for the NFS root directory:

bash

/nfsroot *(rw,sync,no_subtree_check)

Step 5: Restart NFS Service

Restart the NFS service to apply the changes:

bash

sudo exportfs -a
sudo systemctl restart nfs-kernel-server

Step 6: Unmount the ext4 Image

Once you have copied the files, you can unmount the rootfs.ext4 file:

bash

sudo umount /mnt/rootfs

Step 7: Boot the BBB

Now, you can boot your BeagleBone Black with the NFS configuration pointing to /nfsroot. This setup should now work without the need for mounting and unmounting the .ext4 file.


***************setting permissions, DONT skip*****************************
sudo chmod -R 755 /nfsrootpath   <--do for nfs folder, tftp folder
sudo chmod -R 644 /nfsfiles      <--and for nfs/tftp files



5.3 Uboot env

*******************************Commands to run in u-boot command terminal:  *******************************
setenv bootpart 0:1
setenv devtype mmc
setenv bootdir ""
setenv bootfile zImage
setenv fdtfile am335x-boneblack.dtb
setenv bootpartition mmcblk0p2
setenv console ttyS0,115200n8
setenv loadaddr 0x82000000
setenv fdtaddr 0x88000000

setenv ipaddr 192.168.0.150
setenv devaddr de:ad:be:ef:00:01
setenv serverip 192.168.0.11
setenv hostaddr 74:da:38:41:ae:6e
setenv nfsrootpc ${serverip}:/home/kishore/nfsroot

setenv set_mmc1 'if test ${devtype} = mmc; then setenv bootpartition ${bootpart}; fi'
setenv set_sd_bootargs 'setenv bootargs console=${console} root=/dev/${bootpartition} rw rootfstype=ext4 rootwait'
setenv set_sd_loadimage 'load ${devtype} ${bootpart} ${loadaddr} ${bootfile}'
setenv set_sd_loadfdt 'load ${devtype} ${bootpart} ${fdtaddr} ${fdtfile}'
setenv uenvcmd_sd 'run set_mmc1; run set_sd_bootargs; run set_sd_loadimage; run set_sd_loadfdt; printenv bootargs; bootz ${loadaddr} - ${fdtaddr}'

setenv set_tftp_nfs_bootargs 'setenv bootargs console=${console} root=/dev/nfs ip=dhcp:::::usb0 g_ether.dev_addr=${usbnet_devaddr} g_ether.host_addr=${usbnet_hostaddr} nfsroot=${nfsrootpc},nfsvers=3,tcp rw'
setenv set_tftp_nfs_loadimage 'tftp ${loadaddr} ${bootfile}'
setenv set_tftp_nfs_loadfdt 'tftp ${fdtaddr} ${fdtfile}'
setenv uenvcmd_tftp_nfs 'run set_tftp_nfs_bootargs; run set_tftp_nfs_loadimage; run set_tftp_nfs_loadfdt; printenv bootargs; bootz ${loadaddr} - ${fdtaddr}'

Note: the following was also set:
usbnet_devaddr=f8:dc:7a:00:00:02
usbnet_hostaddr=f8:dc:7a:00:00:01


******************if using buildroot .ext4 file in nfs root directory instead of busybox generated fs***********************************

setenv set_tftp_nfs_bootargs 'setenv bootargs console=${console} root=/dev/nfs ip=dhcp:::::usb0 g_ether.dev_addr=${usbnet_devaddr} g_ether.host_addr=${usbnet_hostaddr} nfsroot=${nfsrootpc},nfsvers=3,tcp rw rootfstype=ext4 rootwait'



********************************************************************************

RUNNING TFTP_NFS BOOT
sudo systemctl start tftpd-hpa
sudo systemctl restart tftpd-hpa
sudo systemctl restart nfs-kernel-server
sudo systemctl status nfs-kernel-server
--ping server from BBB(ping ${serverip}), should say alive (hostname -I to get host ip)
run uenvcmd_tftp_nfs
3.wait long time... login=root, password=set at the buildroot menu

Note: ethernet to router required for nfs
********************************************


6. EMMC(on board flash) and TFTP boot
*****************************************



do in booted kernel:

dd if=/dev/zero of=/dev/mmcblk1 bs=1M count=10   <--erase current emmc   

fdisk /dev/mmcblk1

Inside fdisk, create a new partition:

    Press o to create a new DOS partition table.
    Press n to create a new partition.
    Press p for primary, 1 for partition 1
    Press +100M for 100 MB partition
    Press t and set the type to b (W95 FAT32).
    Press w to write the partition table.

-In the fdisk interface, you can follow these steps:

1.Create a new partition: Press n to create a new partition.

2.Select primary partition: Press p for a primary partition.

3.Partition number: Choose partition number 1.

4.Start and end sectors: For the first partition, enter the start sector (default is usually fine), and for the size, specify +100M (or whatever size you prefer for the bootloader partition).

5.Format for FAT32: Press t, and then select c to set the partition type to W95 FAT32 (LBA) for compatibility with U-Boot. Press a to make it bootable partition.

6.Create a second partition: Press n to create another primary partition for the root filesystem, choose number 2. Use the rest of the space available on the eMMC.

7.Set the partition type: For the second partition (ext4), you don’t need to change the type. Leave it as Linux.

8.Write changes: Press w to write the partition table to disk and exit fdisk.
-write FAT32 filesystem on new FAT32 partition

mkfs.vfat -F 32 /dev/mmcblk1p1  
mkfs.ext4 /dev/mmcblk1p2


-mount and copy uboot files
--example: 
mount /dev/mmcblk1p1 media   <---emmc p1
mount /dev/mmcblk0p1 mnt   <---sdcard partition 1
-copy files from mnt to media


on boot, interrupt the uboot, and check the enviornment vars
-may need to setenv again:

-default emmc boot command: only need this for emmc booting if you copied zimage and .dtb to emmc also.

setenv bootcmd 'mmc dev 1; load mmc 1:1 0x82000000 zImage; load mmc 1:1 0x88000000 am335x-boneblack.dtb; bootz 0x82000000 - 0x88000000'
setenv bootargs 'console=ttyO0,115200n8 root=/dev/mmcblk1p2 rootfstype=ext4 rootwait'


user:root, pass:dall *for my login details if specified in buildroot


-tftp/nfs boot commands:

setenv bootpart 0:1
setenv devtype mmc
setenv bootdir ""
setenv bootfile zImage
setenv fdtfile am335x-boneblack.dtb
setenv bootpartition mmcblk0p2
setenv console ttyS0,115200n8
setenv loadaddr 0x82000000
setenv fdtaddr 0x88000000

setenv ipaddr 192.168.0.150
setenv devaddr de:ad:be:ef:00:01
setenv serverip 192.168.0.109
setenv hostaddr 74:da:38:41:ae:6e
setenv nfsrootpc ${serverip}:/home/kishore/nfsroot2

setenv set_mmc1 'if test ${devtype} = mmc; then setenv bootpartition ${bootpart}; fi'
setenv set_sd_bootargs 'setenv bootargs console=${console} root=/dev/${bootpartition} rw rootfstype=ext4 rootwait'
setenv set_sd_loadimage 'load ${devtype} ${bootpart} ${loadaddr} ${bootfile}'
setenv set_sd_loadfdt 'load ${devtype} ${bootpart} ${fdtaddr} ${fdtfile}'
setenv uenvcmd_sd 'run set_mmc1; run set_sd_bootargs; run set_sd_loadimage; run set_sd_loadfdt; printenv bootargs; bootz ${loadaddr} - ${fdtaddr}'

setenv set_tftp_nfs_bootargs 'setenv bootargs console=${console} root=/dev/nfs ip=dhcp:::::usb0 g_ether.dev_addr=${usbnet_devaddr} g_ether.host_addr=${usbnet_hostaddr} nfsroot=${nfsrootpc},nfsvers=3,tcp rw'
setenv set_tftp_nfs_loadimage 'tftp ${loadaddr} ${bootfile}'
setenv set_tftp_nfs_loadfdt 'tftp ${fdtaddr} ${fdtfile}'
setenv uenvcmd_tftp_nfs 'run set_tftp_nfs_bootargs; run set_tftp_nfs_loadimage; run set_tftp_nfs_loadfdt; printenv bootargs; bootz ${loadaddr} - ${fdtaddr}'

setenv bootcmd 'mmc dev 1; load mmc 1:1 ${loadaddr} ${bootfile}; load mmc 1:1 ${fdtaddr} ${fdtfile}; bootz ${loadaddr} - ${fdtaddr}'

setenv bootargs 'console=ttyO0,115200n8 root=/dev/mmcblk1p2 rootfstype=ext4 rootwait'





















********Linux Driver Development********
-2 ways: 
1. Built into kernel(monolithic), requires recompiling of kernel.
2. Driver implemented as a module in the kernel, doesnt require recompile of kernel.

-Module is a specifically designed obj file. It is linked to the kernel by being loaded into the kernel's address space.

-when writing a kernel module: you need a .c file and Makefile at least. 
-in .c, init_module() and cleanup_module() are 2 functions that are necessary, and a ending line for the GPL : MODULE_LICENSE("GPL"); 

example:
/*
#include <linux/module.h> /* Needed by all modules */ 
#include <linux/printk.h> /* Needed for pr_info() */ 


int init_module(void) 
{ 
    pr_info("Hello world 1.\n"); 

    /* A non 0 return means init_module failed; module can't be loaded. */ 

    return 0; 
} 

void cleanup_module(void) 
{ 
    pr_info("Goodbye world 1.\n"); 
} 


MODULE_LICENSE("GPL");
*/

-cleanup_module function should reverse or undo changes that the init_module function did to allow proper loading and unloading of the module.

-by including a header file called linux/init.h, you can change the init_module and cleanup_module function names: 

Function Registration: When you use module_init(hello_2_init);, you are telling the kernel to call a function, hello_2_init when the module is loaded. 

Memory Optimization: By marking hello_2_init with __init, you are informing the kernel that this function is only needed for initialization. After the module is successfully loaded and initialized, the kernel can discard the code for this function to free up memory.

so possible implementation looks like: 

#include<linux/init.h>
...
static int __init hello_2_init(void){return 0;}
static void __exit hello_2_exit(void){}
...
module_init(hello_2_init);
module_exit(hello_2_exit);
...
//end of implementation.








